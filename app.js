
const path = require('path')
const express = require('express')
// const morgan = require('morgan')
const cookieParser = require('cookie-parser')
const cors = require('cors')
// const dotenv = require('dotenv')
const AppError = require('./middleware/appError.js')
// const { errorHandler } = require('./middleware/errorMiddleware.js')
const booksRouter = require('./routes/bookRoutes')
// dotenv.config()

const app = express()

//Development logging
// if (process.env.NODE_ENV === "development")
//     app.use(morgan('dev'))

//Body parser middleware
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

app.use(cors())

//Cookie parser middleware
app.use(cookieParser())

app.get('/', (req, res) => {
    res.send('API is running...')
})



/*============================== ROUTES ================================*/
app.use('/api/books', booksRouter);

// app.use('/api/upload', uploadRoutes);

// const __dirname = path.resolve();
// app.use('/uploads', express.static(path.join(__dirname, '/uploads')));


/*============================== HANDLE ERROR ================================*/

// //Handling error route
// app.all('*', (req, res, next) => {
//     //Truy·ªÅn ƒë·∫øn middleware x·ª≠ l√Ω l·ªói cu·ªëi c√πng, b·ªè qua m·ªçi middleware c√≤n l·∫°i
//     next(new AppError(`Can't find ${req.originalUrl} on this server`, 404))
// })

// // //B·∫Øt l·ªói m√£ ƒë·ªìng b·ªô --> khi m·ªôt ngo·∫°i l·ªá kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω
// process.on('uncaughtException', err => {
//     console.log('UNHANDLED EXCEPTION üî• Shutting down...');
//     console.log(err.name, err.message);
//     process.exit(1)
// })

// // //Handling all error
// app.use(errorHandler)

// // const server = app.listen(port, () => console.log(`Server running on port ${port}`))
// // //-	L·ªói th∆∞·ªùng li√™n quan ƒë·∫øn k·∫øt n·ªëi DB (v√≠ d·ª• nh∆∞ m·∫≠t kh·∫©u DB b·ªã sai ho·∫∑c b·ªã thay ƒë·ªïi,‚Ä¶.)
// process.on('unhandledRejection', err => {
//     console.log('UNHANDLED REJECTION üî• Shutting down...');
//     console.log(err.name, err.message);
//     server.close(() => {
//         process.exit(1)
//     })
// })

// handle 404 response
app.use((req, res, next) => {
    // Code ·ªü ƒë√¢y s·∫Ω ch·∫°y khi kh√¥ng c√≥ route ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a n√†o
    // kh·ªõp v·ªõi y√™u c·∫ßu. G·ªçi next() ƒë·ªÉ chuy·ªÉn sang middleware x·ª≠ l√Ω l·ªói
    return next(new AppError("Resource not found", 404));
});
// define error-handling middleware last, after other app.use() and routes calls
app.use((err, req, res, next) => {
    // Middleware x·ª≠ l√Ω l·ªói t·∫≠p trung.
    // Trong c√°c ƒëo·∫°n code x·ª≠ l√Ω ·ªü c√°c route, g·ªçi next(error)
    // s·∫Ω chuy·ªÉn v·ªÅ middleware x·ª≠ l√Ω l·ªói n√†y
    return res.status(err.statusCode || 500).json({
        message: err.message || "Internal Server Error",
    });
});

module.exports = app